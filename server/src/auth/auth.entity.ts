import {
  BaseEntity,
  Column,
  CreateDateColumn,
  Entity,
  Index,
  ManyToOne,
  PrimaryGeneratedColumn,
  UpdateDateColumn,
} from "typeorm";
import UserEntity from "@server/user/user.entity";

@Entity({ name: "authentications" })
@Index(["userId", "provider"], { unique: true })
export default class AuthenticationEntity extends BaseEntity {
  @PrimaryGeneratedColumn("uuid")
  id: string;

  @Column({ type: "uuid" })
  userId: string;

  @Column({ type: "varchar" })
  provider: string;

  @Column({
    type: "varchar",
    nullable: true,
    default: null,
    comment: `the refresh token, generated by the current web service`,
  })
  refreshToken: string | null;

  @Column({
    type: "varchar",
    nullable: true,
    default: null,
    comment: `the password of the authentication (only for local flow of authentication)`,
  })
  password: string | null;

  @Column({
    type: "boolean",
    default: false,
    comment: `email verification status`,
  })
  isEmailVerified: boolean;

  @Column({
    type: "varchar",
    nullable: true,
    default: null,
    comment: `the email verification token, generated by the current web service`,
  })
  emailVerificationToken: string | null;

  @Column({
    type: "timestamptz",
    nullable: true,
    default: null,
    comment: `the time when the email verification token was sent during local email verification flow`,
  })
  emailVerificationSendAt: Date | null;

  @CreateDateColumn({ type: "timestamptz" })
  createdAt: Date;

  @UpdateDateColumn({
    type: "timestamptz",
    comment: `the last time the authentication was accessed, similar to "updatedAt"`,
  })
  lastAccessedAt: Date;

  // associations
  @ManyToOne(() => UserEntity, (user) => user.authentications)
  user: UserEntity;
}
